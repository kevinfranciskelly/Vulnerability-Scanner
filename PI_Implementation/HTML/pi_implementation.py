import RPi.GPIO as GPIO # Import Raspberry Pi GPIO Library
import time
from RPLCD.gpio import CharLCD
import sys
import os
import shodan
import socket
from netifaces import interfaces, ifaddresses, AF_INET
from datetime import datetime
from requests import get
import webbrowser
import telnetlib

from shodan import APIError

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(10, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

lcd = CharLCD(pin_rs=15, pin_rw=18, pin_e=16, pins_data=[21,22,23,24], numbering_mode=GPIO.BOARD, cols=16, rows=2)
lcd.clear()
time.sleep(2)
while True:
    now = datetime.now()
    formatteddate = now.strftime("%d/%m/%Y %H:%M")
    for ifaceName in interfaces():
        addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET, [{'addr': 'No IP addr'}])]
    lcd.write_string(addresses[0] + "\n\r" + formatteddate)
    if GPIO.input(10) == GPIO.HIGH:
        print("Internal Scan!")
        lcd.clear()
        time.sleep(2)
        lcd.write_string("Internal Scan!")
        time.sleep(2)
        #Internal Scan
        now = datetime.now()
        formatteddate = now.strftime("%d/%m/%Y %H:%M:%S")
        with open("/var/www/html/internalreport.txt", 'w') as f:
            f.write("INTERNAL SCAN REPORT ON " + formatteddate + "\n")
            f.write("NETWORK SCANNED: " + "\n")
            f.close()

        for ifaceName in interfaces():
            addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET, [{'addr': 'No IP addr'}])]

        for i in addresses:
            lastdot = i.rfind('.')
            networkaddrincomplete = i[0:lastdot]
            networkaddr = i[0:lastdot] + ".0 /24"
            with open("/var/www/html/internalreport.txt", 'a') as f:
                f.write(networkaddr + "\n\n")
                f.write("***IP & PORTS FOUND: ***" + "\n\n")
                f.close()

            # As we are assuming /24, the range will be x.y.x.1 - x.y.z.254 inclusive
            for x in range(1, 255):
                networkaddrcomplete = networkaddrincomplete + "." + str(x)
                response = os.system("ping -c 1 " + networkaddrcomplete)

                # if the address is active then it will return 0
                if response == 0:
                    openports = []
                    istelnet = False
                    with open("/var/www/html/internalreport.txt", 'a') as f:
                        f.write("IP ADDRESS: " + networkaddrcomplete + "\n")
                        f.write("OPEN PORTS: ")
                        f.close()

                    for port in range(1, 1024):
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        sock.settimeout(3)
                        result = sock.connect_ex((networkaddrcomplete, port))
                        if result == 0:
                            print(port)
                            if port == 23:
                                istelnet = True
                            openports.append(port)

                    with open("/var/www/html/internalreport.txt", 'a') as f:
                        f.write(str(openports))
                        f.write("\n\n")
                        f.close()

                    if istelnet:
                        authenticated = False
                        creds = open("credentials.txt", 'r')
                        lines = creds.readlines()

                        for combo in lines and not authenticated:
                            divider = combo.find(':')
                            username = combo[0:divider]
                            password = combo[divider:]
                            telnet = telnetlib.Telnet(networkaddrcomplete)
                            telnet.read_until(b"User Name:")
                            telnet.write(b"" + username + "\n")
                            telnet.read_until(b"Password:")
                            telnet.write(password + "\n")
                            output = telnet.read_very_eager()
                            if not output:
                                print()
                            else:
                                authenticated = True
                                with open("/var/www/html/internalreport.txt", 'a') as f:
                                    f.write("PORT 23 OPEN, ATTEMPTING TELNET CONNECTION" + "\n")
                                    f.write(
                                        "HOST COMPROMISED: Telnet Connection Using " + username + " and " + password + "\n")
                                    f.write("\n")
                                    f.close()
       
        time.sleep(10)
        lcd.clear()
        lcd.write_string("External Scan!")
        # Get the public IP Address
        publicIP = get('https://api.ipify.org').text
        # First, connect to the Shodan API using the API Key
        with open("/var/www/html/externalreport.txt", "w") as f:
            now = datetime.now()
            formatteddate = now.strftime("%d/%m/%Y %H:%M:%S")
            f.write("EXTERNAL SCAN REPORT ON " + formatteddate + "\n")
            f.write("IP ADDRESS TESTED: " + publicIP + "\n")
            f.close()
        
        shodansuccess = True
        api = shodan.Shodan('N4JKmUarpuJx0vVFLS0smrPJRxwRGWKI')
        try:
            info = api.host(publicIP)
            # An APIError will be raised if it cannot find information on the user's Public IP
        except APIError:
            shodansuccess = False
            with open("/var/www/html/externalreport.txt", "a") as f:
                f.write("Shodan could not find any information on your Public IP Address" + "\n")
                f.write("COMMENCING PORT SCAN " + "\n")
                f.close()
            if shodansuccess:
                with open("/var/www/html/externalreport.txt", "a") as f:
                    f.write("INFORMATION FOUND ON SHODAN: " + "\n")
                    f.write("ISP: " + info["isp"] + "\n")
                    f.write("HOSTNAMES: " + str(info["hostnames"]) + "\n")
                    f.write("CITY: " + info["city"] + "\n")
                    f.write("COUNTRY: " + info["country_name"] + "\n")
                    f.write("COMMENCING PORT SCAN " + "\n")
                    f.close()
                print(info)
            # Next, conduct the port scan on the public IP address
            openports = []
            istelnet = False

            for port in range(1, 1024):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(12)
                result = sock.connect_ex((publicIP, port))
                if result == 0:
                    print(port)
                    if port == 23:
                        istelnet = True
                    openports.append(port)

            with open("/var/www/html/externalreport.txt", 'a') as f:
                f.write("OPEN PORTS: " + str(openports))
                f.write("\n\n")
                f.close()
                
            if istelnet:
                authenticated = False
                creds = open("credentials.txt", 'r')
                lines = creds.readlines()

                for combo in lines and not authenticated:
                    divider = combo.find(':')
                    username = combo[0:divider]
                    password = combo[divider:]
                    telnet = telnetlib.Telnet(publicIP)
                    telnet.read_until(b"User Name:")
                    telnet.write(b"" + username + "\n")
                    telnet.read_until(b"Password:")
                    telnet.write(password + "\n")
                    output = telnet.read_very_eager()
                    if not output:
                        print()
                    else:
                        authenticated = True
                        with open("/var/www/html/externalreport.txt", 'a') as f:
                            f.write("PORT 23 OPEN, ATTEMPTING TELNET CONNECTION" + "\n")
                            f.write("HOST COMPROMISED: Telnet Connection Using " + username + " and " + password + "\n")
                            f.write("\n")
                            f.close()
        
        lcd.clear()
        lcd.write_string("All done!")
        time.sleep(5)
        lcd.clear()
    