import sys
import os
import shodan
import socket
from PyQt5 import QtWidgets
from netifaces import interfaces, ifaddresses, AF_INET
from datetime import datetime
from requests import get
import webbrowser
import telnetlib

from shodan import APIError

def listToString(s):
    # initialize an empty string
    str1 = ""

    # traverse in the string
    for ele in s:
        str1 += str(ele) + " "

        # return string
    return str1


def isinternet(self):
    hostname = "google.com"
    response = os.system("ping -c 1 " + hostname)

    if response == 0:
        print("Connected to the Internet")
        return True
    else:
        print("Not connected to the Internet")
        return False


class AboutPage(QtWidgets.QDialog):
    def __init__(self):
        super(HomePage, self).__init__()
        self.setFixedSize(800, 800)
        # Set the Text
        self.headerText = QtWidgets.QLabel("Welcome to the Vulnerability Scanner", self)
        self.headerText.setGeometry(220, 0, 400, 400)

isScan = False
# This is the Class for the Home Page #
class HomePage(QtWidgets.QDialog):
    def __init__(self):
        super(HomePage, self).__init__()
        self.setFixedSize(800, 800)

        # Set the Text
        self.headerText = QtWidgets.QLabel("Welcome to the Vulnerability Scanner", self)
        self.headerText.setGeometry(220, 0, 400, 400)

        # Set the "Internal Scan Button"
        self.internalScanButton = QtWidgets.QPushButton(self)
        self.internalScanButton.setText("Internal Scan")
        self.internalScanButton.setGeometry(315, 300, 150, 50)
        self.internalScanButton.clicked.connect(self.internalclicked)

        # Set the "External Scan Button"
        self.externalScanButton = QtWidgets.QPushButton(self)
        self.externalScanButton.setText("External Scan")
        self.externalScanButton.setGeometry(315, 370, 150, 50)
        self.externalScanButton.clicked.connect(self.externalclicked)

        # Set the "About Button"
        self.aboutButton = QtWidgets.QPushButton(self)
        self.aboutButton.setText("About")
        self.aboutButton.setGeometry(315, 440, 150, 50)
        self.aboutButton.clicked.connect(self.aboutclicked)

        # Set the "Go to Shodan Button"
        self.shodanButton = QtWidgets.QPushButton(self)
        self.shodanButton.setText("Go to Shodan Website")
        self.shodanButton.setGeometry(275, 510, 250, 50)
        self.shodanButton.clicked.connect(self.shodanclicked)

        # Set the "Enter API Key Button"
        self.apiButton = QtWidgets.QPushButton(self)
        self.apiButton.setText("Enter API Key")
        self.apiButton.setGeometry(315, 580, 150, 50)
        self.apiButton.clicked.connect(self.apiclicked)

        self.setWindowTitle("Welcome")

    def aboutclicked(self):
        QtWidgets.QMessageBox.about(self, "", "This is a vulnerability scanner to check if your devices are vulnerable to attack \n\n" +
                                              "Internal Scan will check all devices on your private network \n\n" +
                                              "External Scan will check your Public IP Address using the Shodan API \n\n" +
                                            "To use the External Scan, you need a Shodan API Key, you can get one by clicking 'Go to Shodan Website'")

    def internalclicked(self):
        internetcheck = isinternet(self)
        QtWidgets.QMessageBox.about(self, "", "Beginning Internal Scan")
        # Create a text file of today's date, this will hold the report
        now = datetime.now()
        formatteddate = now.strftime("%d/%m/%Y %H:%M:%S")
        with open("report.txt", 'w') as f:
            f.write("INTERNAL SCAN REPORT ON " + formatteddate + "\n")
            f.write("NETWORK SCANNED: " + "\n")
            f.close()

        for ifaceName in interfaces():
            addresses = [i['addr'] for i in ifaddresses(ifaceName).setdefault(AF_INET, [{'addr': 'No IP addr'}])]

        for i in addresses:
            lastdot = i.rfind('.')
            networkaddrincomplete = i[0:lastdot]
            networkaddr = i[0:lastdot] + ".0 /24"
            with open("report.txt", 'a') as f:
                f.write(networkaddr + "\n\n")
                f.write("***IP & PORTS FOUND: ***" + "\n\n")
                f.close()

            # As we are assuming /24, the range will be x.y.x.1 - x.y.z.254 inclusive
            for x in range(1, 255):
                networkaddrcomplete = networkaddrincomplete + "." + str(x)
                response = os.system("ping -c 1 " + networkaddrcomplete)

                # if the address is active then it will return 0
                if response == 0:
                    openports = []
                    istelnet = False
                    with open("report.txt", 'a') as f:
                        f.write("IP ADDRESS: " + networkaddrcomplete + "\n")
                        f.write("OPEN PORTS: ")
                        f.close()

                    for port in range(1, 1024):
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        sock.settimeout(3)
                        result = sock.connect_ex((networkaddrcomplete, port))
                        if result == 0:
                            print(port)
                            if port == 23:
                                istelnet = True
                            openports.append(port)

                    with open("report.txt", 'a') as f:
                        f.write(listToString(openports))
                        f.write("\n\n")
                        f.close()

                    if istelnet:
                        authenticated = False
                        creds = open("credentials.txt", 'r')
                        lines = creds.readlines()

                        for combo in lines and not authenticated:
                            divider = combo.find(':')
                            username = combo[0:divider]
                            password = combo[divider:]
                            telnet = telnetlib.Telnet(networkaddrcomplete)
                            telnet.read_until(b"User Name:")
                            telnet.write(b"" + username + "\n")
                            telnet.read_until(b"Password:")
                            telnet.write(password + "\n")
                            output = telnet.read_very_eager()
                            if not output:
                                print()
                            else:
                                authenticated = True
                                with open("report.txt", 'a') as f:
                                    f.write("PORT 23 OPEN, ATTEMPTING TELNET CONNECTION" + "\n")
                                    f.write(
                                        "HOST COMPROMISED: Telnet Connection Using " + username + " and " + password + "\n")
                                    f.write("\n")
                                    f.close()
            QtWidgets.QMessageBox.about(self, "", "Internal Scan Completed. Displaying results now")
            webbrowser.open("report.txt")


    def externalclicked(self):
        # Get the public IP Address
        publicIP = get('https://api.ipify.org').text
        # First, connect to the Shodan API using the API Key
        apiSuccess = True
        with open("externalReport.txt", "w") as f:
            now = datetime.now()
            formatteddate = now.strftime("%d/%m/%Y %H:%M:%S")
            f.write("EXTERNAL SCAN REPORT ON " + formatteddate + "\n")
            f.write("IP ADDRESS TESTED: " + publicIP + "\n")
            f.close()

        try:
            f = open("apiKey.txt", "r")
            key = f.readline()
            print(key)
            api = shodan.Shodan(key)
        except TypeError:
            QtWidgets.QMessageBox.about(self, "", "Error: You have not entered an API key, please enter one now")
            apiSuccess = False

        if apiSuccess:
            shodansuccess = True
            try:
                info = api.host(publicIP)
            # An APIError will be raised if it cannot find information on the user's Public IP
            except APIError:
                shodansuccess = False
                with open("externalReport.txt", "a") as f:
                    f.write("Shodan could not find any information on your Public IP Address" + "\n")
                    f.write("COMMENCING PORT SCAN " + "\n")
                    f.close()
            if shodansuccess:
                with open("externalReport.txt", "a") as f:
                    f.write("INFORMATION FOUND ON SHODAN: " + "\n")
                    f.write("ISP: " + info["isp"] + "\n")
                    f.write("HOSTNAMES: " + str(info["hostnames"]) + "\n")
                    f.write("CITY: " + info["city"] + "\n")
                    f.write("COUNTRY: " + info["country_name"] + "\n")
                    f.write("COMMENCING PORT SCAN " + "\n")
                    f.close()
                print(info)
            # Next, conduct the port scan on the public IP address
            openports = []
            istelnet = False

            for port in range(1, 1024):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(12)
                result = sock.connect_ex((publicIP, port))
                if result == 0:
                    print(port)
                    if port == 23:
                        istelnet = True
                    openports.append(port)

            with open("externalReport.txt", 'a') as f:
                f.write("OPEN PORTS: " + listToString(openports))
                f.write("\n\n")
                f.close()

            if istelnet:
                authenticated = False
                creds = open("credentials.txt", 'r')
                lines = creds.readlines()

                for combo in lines and not authenticated:
                    divider = combo.find(':')
                    username = combo[0:divider]
                    password = combo[divider:]
                    telnet = telnetlib.Telnet(publicIP)
                    telnet.read_until(b"User Name:")
                    telnet.write(b"" + username + "\n")
                    telnet.read_until(b"Password:")
                    telnet.write(password + "\n")
                    output = telnet.read_very_eager()
                    if not output:
                        print()
                    else:
                        authenticated = True
                        with open("report.txt", 'a') as f:
                            f.write("PORT 23 OPEN, ATTEMPTING TELNET CONNECTION" + "\n")
                            f.write(
                                "HOST COMPROMISED: Telnet Connection Using " + username + " and " + password + "\n")
                            f.write("\n")
                            f.close()
            QtWidgets.QMessageBox.about(self, "", "External Scan Completed. Displaying results now")
            webbrowser.open("externalReport.txt")

    def apiclicked(self):
        userinput, ok = QtWidgets.QInputDialog().getText(self, "Enter API Key", "Enter API Key: ")

        if ok and userinput:
            print(userinput)
            writetofile = open("apiKey.txt", "w")
            writetofile.write(userinput)
            writetofile.close()

    def shodanclicked(self):
        webbrowser.open_new("https://developer.shodan.io/api/requirements")


if __name__ == '__main__':
    import sys

    app = QtWidgets.QApplication(sys.argv)
    gui = HomePage()
    gui.show()
    sys.exit(app.exec_())
